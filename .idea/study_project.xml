<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="What can be better than a cup of coffee during a break? A coffee that you don’t have to make yourself. It’s enough to press a couple of buttons on the machine and you get a cup of energy; but first, we should teach the machine how to do it. In this project, you will work on programming a coffee-machine simulator. The machine works with quite typical products: coffee, milk, sugar, and plastic cups; if it runs out of something, it shows a notification. The machine can make three types of coffee: espresso, cappuccino and latte. Since nothing’s for free, it also collects the money.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/33&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Coffee Machine (Java)" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="175" />
                <option name="stepId" value="5329" />
                <option name="title" value="Hello, coffee!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="176" />
                <option name="stepId" value="5330" />
                <option name="title" value="Machines have needs" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="177" />
                <option name="stepId" value="5331" />
                <option name="title" value="Enough coffee for everyone" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="178" />
                <option name="stepId" value="5332" />
                <option name="title" value="Action!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="179" />
                <option name="stepId" value="5333" />
                <option name="title" value="On a coffee loop" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="180" />
                <option name="stepId" value="5334" />
                <option name="title" value="Brush your code" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="The first program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="260" />
                      <option name="theoryId" value="3801" />
                      <option name="title" value="IntelliJ IDEA" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="6577" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="30" />
                      <option name="theoryId" value="3520" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="112" />
                      <option name="theoryId" value="3513" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="146" />
                      <option name="theoryId" value="3519" />
                      <option name="title" value="Arithmetic operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="191" />
                      <option name="theoryId" value="3739" />
                      <option name="title" value="Write, compile and run" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="149" />
                      <option name="theoryId" value="3499" />
                      <option name="title" value="JVM, JRE and JDK" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="192" />
                      <option name="theoryId" value="3746" />
                      <option name="title" value="Running programs on your computer" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="113" />
                      <option name="theoryId" value="3603" />
                      <option name="title" value="Scanning the input" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="27" />
                      <option name="theoryId" value="3565" />
                      <option name="title" value="Integer types and operations" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="87" />
                      <option name="theoryId" value="3516" />
                      <option name="title" value="Boolean and logical operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="88" />
                      <option name="theoryId" value="3512" />
                      <option name="title" value="Relational operators" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="25" />
                      <option name="theoryId" value="3503" />
                      <option name="title" value="Conditional statement" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="502" />
                      <option name="theoryId" value="6865" />
                      <option name="title" value="Units of information" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="362" />
                      <option name="theoryId" value="5544" />
                      <option name="title" value="Binary numbers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="307" />
                      <option name="theoryId" value="5008" />
                      <option name="title" value="Increment and decrement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="33" />
                      <option name="theoryId" value="3504" />
                      <option name="title" value="Switch statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="89" />
                      <option name="theoryId" value="3505" />
                      <option name="title" value="The for-loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="90" />
                      <option name="theoryId" value="3498" />
                      <option name="title" value="The while and do-while loops" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="19" />
                      <option name="theoryId" value="3507" />
                      <option name="title" value="Branching statements" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="94" />
                      <option name="theoryId" value="3590" />
                      <option name="title" value="Defining methods" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="31" />
                      <option name="theoryId" value="3514" />
                      <option name="title" value="Characters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="9" />
                      <option name="theoryId" value="3523" />
                      <option name="title" value="String" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="17" />
                      <option name="theoryId" value="3535" />
                      <option name="title" value="Constructor" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="116" />
                      <option name="theoryId" value="3495" />
                      <option name="title" value="Instance methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="26" />
                      <option name="theoryId" value="3607" />
                      <option name="title" value="Enum" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="What can be better than a cup of coffee during a break? A coffee that you don’t have to make yourself. It’s enough to press a couple of buttons on the machine and you get a cup of energy; but first, we should teach the machine how to do it. In this project, you will work on programming a coffee-machine simulator. The machine works with quite typical products: coffee, milk, sugar, and plastic cups; if it runs out of something, it shows a notification. The machine can make three types of coffee: espresso, cappuccino and latte. Since nothing’s for free, it also collects the money." />
              <option name="id" value="33" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/204875/additional_files.json" />
              <option name="language" value="java" />
              <option name="templateBased" value="false" />
              <option name="title" value="Coffee Machine (Java)" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="5" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Coffee Machine (Java)" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's start with a program that makes you a coffee – virtual coffee, of course. But in this project, you will implement functionality that simulates a real coffee machine. It can run out of milk, it can run out of coffee beans, it can make different varieties of coffee, and it can take the money for making a coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first version of the program just makes you a coffee. It prints to the standard output what it is doing as it makes a coffee.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Using the &quot;Hello, World!&quot; program, &lt;strong&gt;write the program &lt;/strong&gt;that prints all lines as in the example below.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Starting to make a coffee&#10;Grinding coffee beans&#10;Boiling water&#10;Mixing boiled water with crushed coffee beans&#10;Pouring coffee into the cup&#10;Pouring some milk into the cup&#10;Coffee is ready!&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/33/stages/175/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5329" />
                      <option name="index" value="1" />
                      <option name="name" value="Hello, coffee!" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/machine/CoffeeMachine.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/machine/CoffeeMachine.java" />
                                <option name="text" value="package machine;&#10;&#10;public class CoffeeMachine {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/CoffeeMachineTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CoffeeMachineTest.java" />
                                <option name="text" value="import machine.CoffeeMachine;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;&#10;public class CoffeeMachineTest extends BaseStageTest&lt;String&gt; {&#10;&#10;    public CoffeeMachineTest() {&#10;        super(CoffeeMachine.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;&quot;)&#10;                .setAttach(&quot;Starting to make a coffee\n&quot; +&#10;                    &quot;Grinding coffee beans\n&quot; +&#10;                    &quot;Boiling water\n&quot; +&#10;                    &quot;Mixing boiled water with crushed coffee beans\n&quot; +&#10;                    &quot;Pouring coffee into the cup\n&quot; +&#10;                    &quot;Pouring some milk into the cup\n&quot; +&#10;                    &quot;Coffee is ready!&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        boolean isCorrect = reply.trim().equals(clue.trim());&#10;        return new CheckResult(isCorrect,&#10;            &quot;You should make coffee exactly &quot; +&#10;                &quot;like in the example&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562174382000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Now let's consider a case where you need a lot of coffee. Maybe, for example, you’re hosting a party with a lot of guests. The program should calculate how much water, coffee beans, and milk are necessary to make the specified amount of coffee. One cup of coffee made on this coffee machine contains 200 ml of water, 50 ml of milk, and 15 g of coffee beans.&lt;/p&gt;&#10;&#10;&lt;p&gt;The user should input the amount of coffee he needs, in cups, for all the guests.&lt;/p&gt;&#10;&#10;&lt;p&gt;Of course, all this coffee is not needed right now, so at this stage, the coffee machine doesn’t actually make any coffee.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;The example below shows how your output might look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many cups of coffee you will need: 25&#10;For 25 cups of coffee you will need:&#10;5000 ml of water&#10;1250 ml of milk&#10;375 g of coffee beans&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many cups of coffee you will need: 125&#10;For 125 cups of coffee you will need:&#10;25000 ml of water&#10;6250 ml of milk&#10;1875 g of coffee beans&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/33/stages/176/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5330" />
                      <option name="index" value="2" />
                      <option name="name" value="Machines have needs" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/CoffeeMachineTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CoffeeMachineTest.java" />
                                <option name="text" value="import machine.CoffeeMachine;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;&#10;public class CoffeeMachineTest extends BaseStageTest&lt;String&gt; {&#10;&#10;    public CoffeeMachineTest() {&#10;        super(CoffeeMachine.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;25&quot;)&#10;                .setAttach(&quot;25&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;125&quot;)&#10;                .setAttach(&quot;125&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;1&quot;)&#10;                .setAttach(&quot;1&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;123&quot;)&#10;                .setAttach(&quot;123&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        String[] lines = reply.split(&quot;\\n&quot;);&#10;        if (lines.length &lt; 3) {&#10;            return new CheckResult(false,&#10;                &quot;Output contains less than 3 lines, but should output at least 3 lines&quot;);&#10;        }&#10;        String[] last3Lines = {&#10;            lines[lines.length - 3],&#10;            lines[lines.length - 2],&#10;            lines[lines.length - 1]&#10;        };&#10;&#10;        int cups = Integer.parseInt(clue);&#10;        boolean water = false, milk = false, beans = false;&#10;&#10;        for(String line : last3Lines) {&#10;            line = line.toLowerCase();&#10;&#10;            if(line.contains(&quot;milk&quot;)) {&#10;                milk = line.contains(Integer.toString(cups * 50));&#10;                if (!milk) {&#10;                    return new CheckResult(false,&#10;                        &quot;For the input &quot; + clue + &quot; your program output:\n\&quot;&quot; +&#10;                            line + &quot;\&quot;\nbut the amount of milk should be &quot; + (cups * 50));&#10;                }&#10;&#10;            } else if(line.contains(&quot;water&quot;)) {&#10;                water = line.contains(Integer.toString(cups * 200));&#10;                if (!water) {&#10;                    return new CheckResult(false,&#10;                        &quot;For the input &quot; + clue + &quot; your program output:\n&quot; +&#10;                            line + &quot;\nbut the amount of water should be &quot; + (cups * 200));&#10;                }&#10;&#10;            } else if(line.contains(&quot;beans&quot;)) {&#10;                beans = line.contains(Integer.toString(cups * 15));&#10;                if (!beans) {&#10;                    return new CheckResult(false,&#10;                        &quot;For the input &quot; + clue + &quot; your program output:\n&quot; +&#10;                            line + &quot;\nbut the amount of beans should be &quot; + (cups * 15));&#10;                }&#10;&#10;&#10;            } else {&#10;                return new CheckResult(false,&#10;                    &quot;One of the last 3 lines &quot; +&#10;                        &quot;doesn't contain \&quot;milk\&quot;, \&quot;water\&quot; or \&quot;beans\&quot;&quot;);&#10;            }&#10;        }&#10;&#10;        if (!water) {&#10;            return new CheckResult(false,&#10;                &quot;There is no line with amount of water&quot;);&#10;        }&#10;&#10;        if (!milk) {&#10;            return new CheckResult(false,&#10;                &quot;There is no line with amount of milk&quot;);&#10;        }&#10;&#10;        if (!beans) {&#10;            return new CheckResult(false,&#10;                &quot;There is no line with amount of coffee beans&quot;);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/machine/CoffeeMachine.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/machine/CoffeeMachine.java" />
                                <option name="text" value="package machine;&#10;&#10;public class CoffeeMachine {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562174383000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;A real coffee machine never has an infinite supply of water, milk, or coffee beans. And if you input a really big number, it’s almost certain that a real coffee machine wouldn't have the supplies needed to make all that coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;In this stage, you need to improve the previous program. Now you need to input amounts of water, milk, and coffee beans that your coffee machine has at the moment.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the coffee machine has enough supplies to make the specified amount of coffee, the program should print &quot;Yes, I can make that amount of coffee&quot;. If the coffee machine can make more than that, the program should output &quot;Yes, I can make that amount of coffee (and even N more than that)&quot;, where N is the number of additional cups of coffee that the coffee machine can make. If the amount of resources is not enough to make the specified amount of coffee, the program should output &quot;No, I can make only N cup(s) of coffee&quot;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Like in the previous stage, the coffee machine needs 200 ml of water, 50 ml of milk, and 15 g of coffee beans to make one cup of coffee.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;The program should firstly request for water, then milk, then beans, then amount of cups.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has: 300&#10;Write how many ml of milk the coffee machine has: 65&#10;Write how many grams of coffee beans the coffee machine has: 100&#10;Write how many cups of coffee you will need: 1&#10;Yes, I can make that amount of coffee&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has: 500&#10;Write how many ml of milk the coffee machine has: 250&#10;Write how many grams of coffee beans the coffee machine has: 200&#10;Write how many cups of coffee you will need: 10&#10;No, I can make only 2 cup(s) of coffee&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has: 1550&#10;Write how many ml of milk the coffee machine has: 299&#10;Write how many grams of coffee beans the coffee machine has: 300&#10;Write how many cups of coffee you will need: 3&#10;Yes, I can make that amount of coffee (and even 2 more than that)&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has: 0&#10;Write how many ml of milk the coffee machine has: 0&#10;Write how many grams of coffee beans the coffee machine has: 0&#10;Write how many cups of coffee you will need: 1&#10;No, I can make only 0 cup(s) of coffee&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has: 0&#10;Write how many ml of milk the coffee machine has: 0&#10;Write how many grams of coffee beans the coffee machine has: 0&#10;Write how many cups of coffee you will need: 0&#10;Yes, I can make that amount of coffee &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has: 200&#10;Write how many ml of milk the coffee machine has: 50&#10;Write how many grams of coffee beans the coffee machine has: 15&#10;Write how many cups of coffee you will need: 0&#10;Yes, I can make that amount of coffee (and even 1 more than that)&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/33/stages/177/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5331" />
                      <option name="index" value="3" />
                      <option name="name" value="Enough coffee for everyone" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/CoffeeMachineTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CoffeeMachineTest.java" />
                                <option name="text" value="import machine.CoffeeMachine;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;&#10;class TestClue {&#10;    boolean cond;&#10;    int num;&#10;    boolean showTests;&#10;    TestClue(boolean c, int n, boolean showTests) {&#10;        cond = c;&#10;        num = n;&#10;        this.showTests = showTests;&#10;    }&#10;}&#10;&#10;public class CoffeeMachineTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public CoffeeMachineTest() {&#10;        super(CoffeeMachine.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 0, true))&#10;                .setInput(&quot;300\n65\n111\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 2, true))&#10;                .setInput(&quot;600\n153\n100\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 2, true))&#10;                .setInput(&quot;1400\n150\n100\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 2, true))&#10;                .setInput(&quot;1400\n1500\n45\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(false, 2, true))&#10;                .setInput(&quot;599\n250\n200\n10&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 867, true))&#10;                .setInput( &quot;345640\n43423\n23234\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(false, 1548, true))&#10;                .setInput(&quot;345640\n434230\n23234\n19246&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(false, 172, true))&#10;                .setInput( &quot;34564\n43423\n23234\n19246&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 0, false))&#10;                .setInput(&quot;399\n112\n111\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 3, false))&#10;                .setInput(&quot;2400\n249\n100\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 1, false))&#10;                .setInput(&quot;1400\n1500\n44\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(false, 2, false))&#10;                .setInput(&quot;500\n250\n200\n10&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 171, false))&#10;                .setInput(&quot;34564\n43423\n23234\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(true, 1547, false))&#10;                .setInput(&quot;345640\n434230\n23234\n1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(false, 868, false))&#10;                .setInput(&quot;345640\n43423\n23234\n19246&quot;)&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        String[] lines = reply.trim().split(&quot;:&quot;);&#10;        String userOutput = lines[lines.length - 1].trim();&#10;        String loweredOutput = userOutput.toLowerCase();&#10;        boolean ans = clue.cond;&#10;        int amount = clue.num;&#10;        if (ans &amp;&amp; loweredOutput.contains(&quot;yes&quot;)) {&#10;            if (amount &gt; 0) {&#10;                boolean isCorrect = loweredOutput.contains(Integer.toString(amount));&#10;                if (isCorrect) {&#10;                    return CheckResult.TRUE;&#10;                } else {&#10;&#10;                    String rightOutput =&#10;                        &quot;Yes, I can make that amount of coffee&quot; +&#10;                            &quot; (and even &quot; + amount + &quot; more than that)&quot;;&#10;&#10;                    if (clue.showTests) {&#10;                        return new CheckResult(false,&#10;                            &quot;Your output:\n&quot; +&#10;                                userOutput +&#10;                                &quot;\nRight output:\n&quot; +&#10;                                rightOutput);&#10;                    } else {&#10;                        return CheckResult.FALSE;&#10;                    }&#10;                }&#10;            }&#10;            return CheckResult.TRUE;&#10;        } else {&#10;            boolean cond1 = loweredOutput.contains(&quot;no&quot;);&#10;            boolean cond2 = loweredOutput.contains(Integer.toString(amount));&#10;&#10;            if (cond1 &amp;&amp; cond2) {&#10;                return CheckResult.TRUE;&#10;            } else {&#10;&#10;                String rightOutput = &quot;No, I can make only &quot; +&#10;                    amount +&quot; cup(s) of coffee&quot;;&#10;&#10;                if (clue.showTests) {&#10;                    return new CheckResult(false,&#10;                        &quot;Your output:\n&quot; +&#10;                        userOutput +&#10;                        &quot;\nRight output:\n&quot; +&#10;                        rightOutput);&#10;                } else {&#10;                    return CheckResult.FALSE;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/machine/CoffeeMachine.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/machine/CoffeeMachine.java" />
                                <option name="text" value="package machine;&#10;&#10;public class CoffeeMachine {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562174384000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's simulate an actual coffee machine. It has a limited supply of water, milk, coffee beans, and disposable cups. Also, it counts how much money it gets for selling coffee. The coffee machine has several options: first, it needs to be able to sell coffee. It can make different varieties of coffee: espresso, latte, and cappuccino. Of course, each variety requires a different amount of supplies, except that all of them requires only one disposable cup. Second, the coffee machine should be able to get replenished by a special worker. Third, another special worker should be able to take money from the coffee machine.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write the program that can do one of these actions at a time. It reads one line from standard input, which can be &quot;buy&quot;, &quot;fill&quot;, &quot;take&quot;. If you want to buy some coffee, input &quot;buy&quot;. If you are a special worker and you think that it is time to fill out all the supplies for the coffee machine, input &quot;fill&quot;. If you are another special worker and it is time to take the money from the coffee machine, input &quot;take&quot;.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the user writes &quot;buy&quot; then he must choose one of three varieties of coffee that the coffee machine can make: espresso, latte, or cappuccino.&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;For the espresso, the coffee machine needs 250 ml of water and 16 g of coffee beans. It costs $4.&lt;/li&gt;&#10;&#9;&lt;li&gt;For the latte, the coffee machine needs 350 ml of water, 75 ml of milk, and 20 g of coffee beans. It costs $7.&lt;/li&gt;&#10;&#9;&lt;li&gt;And for the cappuccino, the coffee machine needs 200 ml of water, 100 ml of milk, and 12 g of coffee. It costs $6.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;If the user writes &quot;fill&quot;, the program should ask him how much water, milk, coffee beans and how many disposable cups he wants to add into the coffee machine.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the user writes &quot;take&quot; the program should give him all the money that it earned from selling coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;At the moment, the coffee machine has $550, 1200 ml of water, 540 ml of milk, 120 g of coffee beans, and 9 disposable cups.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write the program that prints the coffee machine’s state, processes one query from the user, and also prints the coffee machine’s state after that. Try to use methods to implement every action that the coffee machine can do.&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;An espresso should be as number 1 in the list, a latte as number 2 and a cappuccino as number 3.&lt;br&gt;&#10;&#9;Options also should be named as &quot;buy&quot;, &quot;fill&quot;, &quot;take&quot;.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;550 of money&#10;&#10;Write action (buy, fill, take): buy&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: 3&#10;&#10;The coffee machine has:&#10;1000 of water&#10;440 of milk&#10;108 of coffee beans&#10;8 of disposable cups&#10;556 of money&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;550 of money&#10;&#10;Write action (buy, fill, take): fill&#10;Write how many ml of water do you want to add: 2000&#10;Write how many ml of milk do you want to add: 500&#10;Write how many grams of coffee beans do you want to add: 100&#10;Write how many disposable cups of coffee do you want to add: 10&#10;&#10;The coffee machine has:&#10;3200 of water&#10;1040 of milk&#10;220 of coffee beans&#10;19 of disposable cups&#10;550 of money&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;550 of money&#10;&#10;Write action (buy, fill, take): take&#10;I gave you $550&#10;&#10;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;0 of money&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/33/stages/178/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5332" />
                      <option name="index" value="4" />
                      <option name="name" value="Action!" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/CoffeeMachineTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CoffeeMachineTest.java" />
                                <option name="text" value="import machine.CoffeeMachine;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;&#10;class TestClue {&#10;    String string;&#10;    TestClue(String s) {&#10;        string = s;&#10;    }&#10;}&#10;&#10;public class CoffeeMachineTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public CoffeeMachineTest() {&#10;        super(CoffeeMachine.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&quot;take\n&quot;))&#10;                .setInput(&quot;take\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&quot;buy\n1\n&quot;))&#10;                .setInput(&quot;buy\n1\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&quot;buy\n2\n&quot;))&#10;                .setInput(&quot;buy\n2\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&quot;buy\n3\n&quot;))&#10;                .setInput(&quot;buy\n3\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&quot;fill\n2001\n510\n101\n21\n&quot;))&#10;                .setInput(&quot;fill\n2001\n510\n101\n21\n&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        String[] lines = reply.trim().split(&quot;\\n&quot;);&#10;&#10;        if (lines.length &lt;= 1) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        String[] clueLines = clue.string.trim().split(&quot;\\n&quot;);&#10;        String action = clueLines[0].trim();&#10;&#10;        List&lt;Integer&gt; milk = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; water = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; beans = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; cups = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; money = new ArrayList&lt;&gt;();&#10;&#10;        for (String line : lines) {&#10;            String[] words = line.split(&quot;\\s+&quot;);&#10;            if (words.length == 0) {&#10;                continue;&#10;            }&#10;            String firstWord = words[0].replace(&quot;$&quot;, &quot;&quot;);&#10;            int amount;&#10;            try {&#10;                amount = Integer.parseInt(firstWord);&#10;            }&#10;            catch (Exception e) {&#10;                continue;&#10;            }&#10;            if (line.contains(&quot;milk&quot;)) {&#10;                milk.add(amount);&#10;            }&#10;            else if (line.contains(&quot;water&quot;)) {&#10;                water.add(amount);&#10;            }&#10;            else if (line.contains(&quot;beans&quot;)) {&#10;                beans.add(amount);&#10;            }&#10;            else if (line.contains(&quot;cups&quot;)) {&#10;                cups.add(amount);&#10;            }&#10;            else if (line.contains(&quot;money&quot;)) {&#10;                money.add(amount);&#10;            }&#10;        }&#10;&#10;        if (milk.size() != 2) {&#10;            return new CheckResult(false,&#10;                &quot;There should be two lines with \&quot;milk\&quot;, &quot; +&#10;                    &quot;found: &quot; + milk.size());&#10;        }&#10;&#10;        if (water.size() != 2) {&#10;            return new CheckResult(false,&#10;                &quot;There should be two lines with \&quot;water\&quot;, &quot; +&#10;                    &quot;found: &quot; + water.size());&#10;        }&#10;&#10;        if (beans.size() != 2) {&#10;            return new CheckResult(false,&#10;                &quot;There should be two lines with \&quot;beans\&quot;, &quot; +&#10;                    &quot;found: &quot; + beans.size());&#10;        }&#10;&#10;        if (cups.size() != 2) {&#10;            return new CheckResult(false,&#10;                &quot;There should be two lines with \&quot;cups\&quot;, &quot; +&#10;                    &quot;found: &quot; + cups.size());&#10;        }&#10;&#10;        if (money.size() != 2) {&#10;            return new CheckResult(false,&#10;                &quot;There should be two lines with \&quot;money\&quot;, &quot; +&#10;                    &quot;found: &quot; + money.size());&#10;        }&#10;&#10;&#10;        int milk0 = milk.get(0);&#10;        int milk1 = milk.get(milk.size() - 1);&#10;&#10;        int water0 = water.get(0);&#10;        int water1 = water.get(water.size() - 1);&#10;&#10;        int beans0 = beans.get(0);&#10;        int beans1 = beans.get(beans.size() - 1);&#10;&#10;        int cups0 = cups.get(0);&#10;        int cups1 = cups.get(cups.size() - 1);&#10;&#10;        int money0 = money.get(0);&#10;        int money1 = money.get(money.size() - 1);&#10;&#10;        if (water0 != 1200 || milk0 != 540 || beans0 != 120&#10;            || cups0 != 9 || money0 != 550) {&#10;            return new CheckResult(false,&#10;                &quot;Initial setup is wrong: &quot; +&#10;                    &quot;coffee machine should fe filled like &quot; +&#10;                    &quot;stated in the description&quot;);&#10;        }&#10;&#10;        int diffWater = water1 - water0;&#10;        int diffMilk = milk1 - milk0;&#10;        int diffBeans = beans1 - beans0;&#10;        int diffCups = cups1 - cups0;&#10;        int diffMoney = money1 - money0;&#10;&#10;        if (action.equals(&quot;take&quot;)) {&#10;&#10;            if (diffMilk != 0) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;take\&quot; action milk &quot; +&#10;                        &quot;amount shouldn't be changed&quot;);&#10;            }&#10;&#10;            if (diffWater != 0) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;take\&quot; action water &quot; +&#10;                        &quot;amount shouldn't be changed&quot;);&#10;            }&#10;&#10;            if (diffBeans != 0) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;take\&quot; action beans &quot; +&#10;                        &quot;amount shouldn't be changed&quot;);&#10;            }&#10;&#10;            if (diffCups != 0) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;take\&quot; action cups &quot; +&#10;                        &quot;amount shouldn't be changed&quot;);&#10;            }&#10;&#10;            if (money1 != 0) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;take\&quot; action money &quot; +&#10;                        &quot;amount should be zero&quot;);&#10;            }&#10;&#10;            return CheckResult.TRUE;&#10;        }&#10;&#10;        else if (action.equals(&quot;buy&quot;)) {&#10;&#10;            String option = clueLines[1].trim();&#10;&#10;            if (option.equals(&quot;1&quot;)) {&#10;&#10;                if (diffWater != -250) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the first option &quot; +&#10;                            &quot;water amount should be lowered by 250&quot;);&#10;                }&#10;&#10;                if (diffMilk != 0) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the first option &quot; +&#10;                            &quot;milk amount should not be changed&quot;);&#10;                }&#10;&#10;                if (diffBeans != -16) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the first option &quot; +&#10;                            &quot;beans amount should be lowered by 16&quot;);&#10;                }&#10;&#10;                if (diffCups != -1) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the first option &quot; +&#10;                            &quot;cups amount should be lowered by 1&quot;);&#10;                }&#10;&#10;                if (diffMoney != 4) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the first option &quot; +&#10;                            &quot;money amount should be increased by 4&quot;);&#10;                }&#10;&#10;                return CheckResult.TRUE;&#10;&#10;            }&#10;&#10;            else if (option.equals(&quot;2&quot;)) {&#10;&#10;                if (diffWater != -350) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the second option &quot; +&#10;                            &quot;water amount should be lowered by 350&quot;);&#10;                }&#10;&#10;                if (diffMilk != -75) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the second option &quot; +&#10;                            &quot;milk amount should be lowered by 75&quot;);&#10;                }&#10;&#10;                if (diffBeans != -20) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the second option &quot; +&#10;                            &quot;beans amount should be lowered by 20&quot;);&#10;                }&#10;&#10;                if (diffCups != -1) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the second option &quot; +&#10;                            &quot;cups amount should be lowered by 1&quot;);&#10;                }&#10;&#10;                if (diffMoney != 7) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the second option &quot; +&#10;                            &quot;money amount should be increased by 7&quot;);&#10;                }&#10;&#10;                return CheckResult.TRUE;&#10;            }&#10;&#10;            else if (option.equals(&quot;3&quot;)) {&#10;&#10;                if (diffWater != -200) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the third option &quot; +&#10;                            &quot;water amount should be lowered by 350&quot;);&#10;                }&#10;&#10;                if (diffMilk != -100) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the third option &quot; +&#10;                            &quot;milk amount should be lowered by 75&quot;);&#10;                }&#10;&#10;                if (diffBeans != -12) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the third option &quot; +&#10;                            &quot;beans amount should be lowered by 20&quot;);&#10;                }&#10;&#10;                if (diffCups != -1) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the third option &quot; +&#10;                            &quot;cups amount should be lowered by 1&quot;);&#10;                }&#10;&#10;                if (diffMoney != 6) {&#10;                    return new CheckResult(false,&#10;                        &quot;After buying the third option &quot; +&#10;                            &quot;money amount should be increased by 7&quot;);&#10;                }&#10;&#10;                return CheckResult.TRUE;&#10;            }&#10;        }&#10;&#10;        else if (action.equals(&quot;fill&quot;)) {&#10;&#10;            int water_ = Integer.parseInt(clueLines[1]);&#10;            int milk_ = Integer.parseInt(clueLines[2]);&#10;            int beans_ = Integer.parseInt(clueLines[3]);&#10;            int cups_ = Integer.parseInt(clueLines[4]);&#10;&#10;            if (diffMoney != 0) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                        &quot;money amount should not be changed&quot;);&#10;            }&#10;&#10;            if (diffWater != water_) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                        &quot;water amount expected to be increased by &quot; + water_ +&#10;                        &quot; but was increased by &quot; + diffWater);&#10;            }&#10;&#10;            if (diffMilk != milk_) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                        &quot;milk amount expected to be increased by &quot; + milk_ +&#10;                        &quot; but was increased by &quot; + diffMilk);&#10;            }&#10;&#10;            if (diffBeans != beans_) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                        &quot;beans amount expected to be increased by &quot; + beans_ +&#10;                        &quot; but was increased by &quot; + diffBeans);&#10;            }&#10;&#10;            if (diffCups != cups_) {&#10;                return new CheckResult(false,&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                        &quot;cups amount expected to be increased by &quot; + cups_ +&#10;                        &quot; but was increased by &quot; + diffCups);&#10;            }&#10;&#10;&#10;            return CheckResult.TRUE;&#10;&#10;        }&#10;&#10;        throw new RuntimeException(&quot;Can't check the answer&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/machine/CoffeeMachine.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/machine/CoffeeMachine.java" />
                                <option name="text" value="package machine;&#10;&#10;public class CoffeeMachine {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562174385000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;But just one action isn’t interesting. Let's improve the program so it can do multiple actions, one after another. The program should repeatedly ask what the user wants to do. If the user types &quot;buy&quot;, &quot;fill&quot; or &quot;take&quot;, then just do what the program did in the previous step. However, if the user wants to switch off the coffee machine, he should type &quot;exit&quot;. Then the program should terminate. Also, when the user types &quot;remaining&quot;, the program should output all the resources that the coffee machine has.&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, do not forget that you can be out of resources for making coffee. If the coffee machine doesn’t have enough resources to make coffee, the program should output a message that says it can't make a cup of coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;And the last improvement to the program at this step—if the user types &quot;buy&quot; to buy a cup of coffee and then changes his mind, he should be able to type &quot;back&quot; to return into the main cycle.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember, that:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;For the espresso, the coffee machine needs 250 ml of water and 16 g of coffee beans. It costs $4.&lt;/li&gt;&#10;    &lt;li&gt;For the latte, the coffee machine needs 350 ml of water, 75 ml of milk, and 20 g of coffee beans. It costs $7.&lt;/li&gt;&#10;    &lt;li&gt;And for the cappuccino, the coffee machine needs 200 ml of water, 100 ml of milk, and 12 g of coffee. It costs $6.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your coffee machine should have the same initial resources as in the example (400 ml of water, 540 ml of milk, 120 g of coffee beans, 9 disposable cups, $550 in cash).&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;400 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;$550 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;50 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: 2&#10;Sorry, not enough water!&#10;&#10;Write action (buy, fill, take, remaining, exit): fill&#10;&#10;Write how many ml of water do you want to add: 1000&#10;Write how many ml of milk do you want to add: 0&#10;Write how many grams of coffee beans do you want to add: 0&#10;Write how many disposable cups of coffee do you want to add: 0&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;1050 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;$564 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): take&#10;&#10;I gave you $564&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;0 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): exit&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/33/stages/179/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5333" />
                      <option name="index" value="5" />
                      <option name="name" value="On a coffee loop" />
                      <option name="record" value="5" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/CoffeeMachineTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CoffeeMachineTest.java" />
                                <option name="text" value="import machine.CoffeeMachine;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;&#10;class TestClue {&#10;    int water;&#10;    int milk;&#10;    int beans;&#10;    int cups;&#10;    int money;&#10;    String feedback;&#10;    TestClue(int w, int m, int b, int c, int mo, String feedback) {&#10;        water = w;&#10;        milk = m;&#10;        beans = b;&#10;        cups = c;&#10;        money = mo;&#10;        this.feedback = feedback;&#10;    }&#10;}&#10;&#10;public class CoffeeMachineTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public CoffeeMachineTest() {&#10;        super(CoffeeMachine.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                700 - 400,&#10;                390 - 540,&#10;                80 - 120 ,&#10;                7 - 9,&#10;                0 - 550,&#10;                    &quot;This test is exactly &quot; +&#10;                        &quot;like in the example - try to run it by yourself&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;fill\n&quot; +&#10;                    &quot;1000\n&quot; +&#10;                    &quot;0\n&quot; +&#10;                    &quot;0\n&quot; +&#10;                    &quot;0\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;take\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                3000,&#10;                3000,&#10;                3000 ,&#10;                3000,&#10;                0,&#10;                    &quot;This test checks \&quot;fill\&quot; action&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;fill\n&quot; +&#10;                    &quot;3000\n&quot; +&#10;                    &quot;3000\n&quot; +&#10;                    &quot;3000\n&quot; +&#10;                    &quot;3000\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                -250,&#10;                0,&#10;                -16 ,&#10;                -1,&#10;                4, &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                    &quot;action with the first variant of coffee&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;1\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                -350,&#10;                -75,&#10;                -20 ,&#10;                -1,&#10;                7, &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                    &quot;action with the second variant of coffee&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                -200,&#10;                -100,&#10;                -12 ,&#10;                -1,&#10;                6, &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                    &quot;action with the third variant of coffee&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;3\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                0,&#10;                0,&#10;                0 ,&#10;                0,&#10;                -550, &quot;This test checks \&quot;take\&quot; action&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;take\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                0,&#10;                0,&#10;                0 ,&#10;                0,&#10;                0, &quot;This test checks \&quot;back\&quot; &quot; +&#10;                    &quot;action right after \&quot;buy\&quot; action&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;buy\n&quot; +&#10;                    &quot;back\n&quot; +&#10;                    &quot;remaining\n&quot; +&#10;                    &quot;exit\n&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        String[] lines = reply.split(&quot;\\n&quot;);&#10;&#10;        if (lines.length &lt;= 1) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        int water_ = clue.water;&#10;        int milk_ = clue.milk;&#10;        int beans_ = clue.beans;&#10;        int cups_ = clue.cups;&#10;        int money_ = clue.money;&#10;&#10;        List&lt;Integer&gt; milk = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; water = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; beans = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; cups = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; money = new ArrayList&lt;&gt;();&#10;&#10;        for (String line : lines) {&#10;            line = line.replace(&quot;$&quot;, &quot;&quot;).trim();&#10;            String[] words = line.split(&quot;\\s+&quot;);&#10;            if (words.length == 0) {&#10;                continue;&#10;            }&#10;            String firstWord = words[0];&#10;            int amount;&#10;            try {&#10;                amount = Integer.parseInt(firstWord);&#10;            }&#10;            catch (Exception e) {&#10;                continue;&#10;            }&#10;            if (line.contains(&quot;milk&quot;)) {&#10;                milk.add(amount);&#10;            }&#10;            else if (line.contains(&quot;water&quot;)) {&#10;                water.add(amount);&#10;            }&#10;            else if (line.contains(&quot;beans&quot;)) {&#10;                beans.add(amount);&#10;            }&#10;            else if (line.contains(&quot;cups&quot;)) {&#10;                cups.add(amount);&#10;            }&#10;            else if (line.contains(&quot;money&quot;)) {&#10;                money.add(amount);&#10;            }&#10;        }&#10;&#10;        int milk0 = milk.get(0);&#10;        int milk1 = milk.get(milk.size() - 1);&#10;&#10;        int water0 = water.get(0);&#10;        int water1 = water.get(water.size() - 1);&#10;&#10;        int beans0 = beans.get(0);&#10;        int beans1 = beans.get(beans.size() - 1);&#10;&#10;        int cups0 = cups.get(0);&#10;        int cups1 = cups.get(cups.size() - 1);&#10;&#10;        int money0 = money.get(0);&#10;        int money1 = money.get(money.size() - 1);&#10;&#10;        int diffWater = water1 - water0;&#10;        int diffMilk = milk1 - milk0;&#10;        int diffBeans = beans1 - beans0;&#10;        int diffCups = cups1 - cups0;&#10;        int diffMoney = money1 - money0;&#10;&#10;        boolean isCorrect =&#10;            diffWater == water_ &amp;&amp;&#10;            diffMilk == milk_ &amp;&amp;&#10;            diffBeans == beans_ &amp;&amp;&#10;            diffCups == cups_ &amp;&amp;&#10;            diffMoney == money_;&#10;&#10;        return new CheckResult(isCorrect, clue.feedback);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/machine/CoffeeMachine.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/machine/CoffeeMachine.java" />
                                <option name="text" value="package machine;&#10;&#10;public class CoffeeMachine {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562174386000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's redesign our program and write a class that represents the coffee machine. The class should have a method that takes a string as input. Every time the user inputs a line (a string) to the console, the program invokes this method with one argument: the line that user input to the console. This system simulates pretty accurately how real-world electronic devices work. External components (like buttons on the coffee machine or tapping on the screen) generate events that pass into the single interface of the program.&lt;/p&gt;&#10;&#10;&lt;p&gt;The class should not use system input at all; it only should handle input that comes to it via this method and its string argument.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first problem that comes to mind: how to write that method in a way that it represents all that coffee machine can do? If the user inputs a single number, how can the method determine what that number is: a variant of coffee chosen by the user or the number of the disposable cups that a special worker added into the coffee machine?&lt;/p&gt;&#10;&#10;&lt;p&gt;The right solution to this problem is to store the current state of the machine. The coffee machine has several states it can be in. For example, the state could be &quot;choosing an action&quot; or &quot;choosing a variant of coffee&quot;. Every time the user inputs something and a program passes that line to the method, the program determines how to interpret this line using the information about the current state. After processing this line, the state of the coffee machine can be changed or can stay the same. The most efficient way of handling states is using an enum with all predefined states.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember, that:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;For the espresso, the coffee machine needs 250 ml of water and 16 g of coffee beans. It costs $4.&lt;/li&gt;&#10;    &lt;li&gt;For the latte, the coffee machine needs 350 ml of water, 75 ml of milk, and 20 g of coffee beans. It costs $7.&lt;/li&gt;&#10;    &lt;li&gt;And for the cappuccino, the coffee machine needs 200 ml of water, 100 ml of milk, and 12 g of coffee. It costs $6.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your coffee machine should have the the same initial resources as in the example (400 ml of water, 540 ml of milk, 120 g of coffee beans, 9 disposable cups, $550 in cash).&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;400 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;$550 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;50 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: 2&#10;Sorry, not enough water!&#10;&#10;Write action (buy, fill, take, remaining, exit): fill&#10;&#10;Write how many ml of water do you want to add: 1000&#10;Write how many ml of milk do you want to add: 0&#10;Write how many grams of coffee beans do you want to add: 0&#10;Write how many disposable cups of coffee do you want to add: 0&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;1050 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;$564 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): take&#10;&#10;I gave you $564&#10;&#10;Write action (buy, fill, take, remaining, exit): remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;$0 of money&#10;&#10;Write action (buy, fill, take, remaining, exit): exit&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/33/stages/180/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5334" />
                      <option name="index" value="6" />
                      <option name="name" value="Brush your code" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/CoffeeMachineTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CoffeeMachineTest.java" />
                                <option name="text" value="import machine.CoffeeMachine;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;&#10;class TestClue {&#10;    int water;&#10;    int milk;&#10;    int beans;&#10;    int cups;&#10;    int money;&#10;    String feedback;&#10;    TestClue(int w, int m, int b, int c, int mo, String feedback) {&#10;        water = w;&#10;        milk = m;&#10;        beans = b;&#10;        cups = c;&#10;        money = mo;&#10;        this.feedback = feedback;&#10;    }&#10;}&#10;&#10;public class CoffeeMachineTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public CoffeeMachineTest() {&#10;        super(CoffeeMachine.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    700 - 400,&#10;                    390 - 540,&#10;                    80 - 120 ,&#10;                    7 - 9,&#10;                    0 - 550,&#10;                    &quot;This test is exactly &quot; +&#10;                        &quot;like in the example - try to run it by yourself&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;fill\n&quot; +&#10;                        &quot;1000\n&quot; +&#10;                        &quot;0\n&quot; +&#10;                        &quot;0\n&quot; +&#10;                        &quot;0\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;take\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    3000,&#10;                    3000,&#10;                    3000 ,&#10;                    3000,&#10;                    0,&#10;                    &quot;This test checks \&quot;fill\&quot; action&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;fill\n&quot; +&#10;                        &quot;3000\n&quot; +&#10;                        &quot;3000\n&quot; +&#10;                        &quot;3000\n&quot; +&#10;                        &quot;3000\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    -250,&#10;                    0,&#10;                    -16 ,&#10;                    -1,&#10;                    4, &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                    &quot;action with the first variant of coffee&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    -350,&#10;                    -75,&#10;                    -20 ,&#10;                    -1,&#10;                    7, &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                    &quot;action with the second variant of coffee&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    -200,&#10;                    -100,&#10;                    -12 ,&#10;                    -1,&#10;                    6, &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                    &quot;action with the third variant of coffee&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    0,&#10;                    0,&#10;                    0 ,&#10;                    0,&#10;                    -550, &quot;This test checks \&quot;take\&quot; action&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;take\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    0,&#10;                    0,&#10;                    0 ,&#10;                    0,&#10;                    0, &quot;This test checks \&quot;back\&quot; &quot; +&#10;                    &quot;action right after \&quot;buy\&quot; action&quot;))&#10;                .setInput(&#10;                    &quot;remaining\n&quot; +&#10;                        &quot;buy\n&quot; +&#10;                        &quot;back\n&quot; +&#10;                        &quot;remaining\n&quot; +&#10;                        &quot;exit\n&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        String[] lines = reply.split(&quot;\\n&quot;);&#10;&#10;        if (lines.length &lt;= 1) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        int water_ = clue.water;&#10;        int milk_ = clue.milk;&#10;        int beans_ = clue.beans;&#10;        int cups_ = clue.cups;&#10;        int money_ = clue.money;&#10;&#10;        List&lt;Integer&gt; milk = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; water = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; beans = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; cups = new ArrayList&lt;&gt;();&#10;        List&lt;Integer&gt; money = new ArrayList&lt;&gt;();&#10;&#10;        for (String line : lines) {&#10;            line = line.replace(&quot;$&quot;, &quot;&quot;).trim();&#10;            String[] words = line.split(&quot;\\s+&quot;);&#10;            if (words.length == 0) {&#10;                continue;&#10;            }&#10;            String firstWord = words[0];&#10;            int amount;&#10;            try {&#10;                amount = Integer.parseInt(firstWord);&#10;            }&#10;            catch (Exception e) {&#10;                continue;&#10;            }&#10;            if (line.contains(&quot;milk&quot;)) {&#10;                milk.add(amount);&#10;            }&#10;            else if (line.contains(&quot;water&quot;)) {&#10;                water.add(amount);&#10;            }&#10;            else if (line.contains(&quot;beans&quot;)) {&#10;                beans.add(amount);&#10;            }&#10;            else if (line.contains(&quot;cups&quot;)) {&#10;                cups.add(amount);&#10;            }&#10;            else if (line.contains(&quot;money&quot;)) {&#10;                money.add(amount);&#10;            }&#10;        }&#10;&#10;        int milk0 = milk.get(0);&#10;        int milk1 = milk.get(milk.size() - 1);&#10;&#10;        int water0 = water.get(0);&#10;        int water1 = water.get(water.size() - 1);&#10;&#10;        int beans0 = beans.get(0);&#10;        int beans1 = beans.get(beans.size() - 1);&#10;&#10;        int cups0 = cups.get(0);&#10;        int cups1 = cups.get(cups.size() - 1);&#10;&#10;        int money0 = money.get(0);&#10;        int money1 = money.get(money.size() - 1);&#10;&#10;        int diffWater = water1 - water0;&#10;        int diffMilk = milk1 - milk0;&#10;        int diffBeans = beans1 - beans0;&#10;        int diffCups = cups1 - cups0;&#10;        int diffMoney = money1 - money0;&#10;&#10;        boolean isCorrect =&#10;            diffWater == water_ &amp;&amp;&#10;                diffMilk == milk_ &amp;&amp;&#10;                diffBeans == beans_ &amp;&amp;&#10;                diffCups == cups_ &amp;&amp;&#10;                diffMoney == money_;&#10;&#10;        return new CheckResult(isCorrect, clue.feedback);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/machine/CoffeeMachine.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/machine/CoffeeMachine.java" />
                                <option name="text" value="package machine;&#10;&#10;public class CoffeeMachine {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562174387000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>